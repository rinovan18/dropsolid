{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% import _self as block %}
{% set  guidance_mode = elements.field_guidance_block_mode[0]['#markup'] | lower %}
{%
set classes = [
'paragraph',
'paragraph--type--guidance-block',
'guidance-mode-' ~ guidance_mode
]
%}

{% if guidance_mode == 'teaser-image' %}
  <div {{ attributes.addClass(classes) }}>
      {{ block.mode(guidance_mode, elements) }}
  </div>
{% else %}
  <a href="{{ elements.field_guidance_block_link.0['#url'] }}" {{ attributes.addClass(classes) }}>
      {{ block.mode(guidance_mode, elements) }}
  </a>
{% endif %}

{% macro mode(view, cont) %}
  {% set image_url = file_url(cont.field_guidance_block_image[0]['#item'].entity.fileuri) %}
  {% if  view == 'title' %}
    <div class="guidance-layer-hidden">
      <p class="guidance-block-teaser">{{ cont.field_guidance_block_teaser.0['#text'] | raw }}</p>
    </div>
  {% elseif  view == 'teaser' %}
    <p class="guidance-block-teaser">{{ cont.field_guidance_block_teaser.0['#text'] | raw }}</p>
  {% elseif  view == 'image' %}
    <img src="{{ image_url }}" alt="{{ cont.field_guidance_block_image[0]['#item'].alt }}" title="{{ cont.field_guidance_block_image[0]['#item'].title }}">
    <div class="guidance-layer-hidden">
      <p class="guidance-block-teaser">{{ cont.field_guidance_block_teaser.0['#text'] | raw }}</p>
    </div>
  {% elseif  view == 'teaser-image' %}
    <img src="{{ image_url }}" alt="{{ cont.field_guidance_block_image[0]['#item'].alt }}" title="{{ cont.field_guidance_block_image[0]['#item'].title }}">
    <div class="guidance-layer-hidden guidance-view-teaser-image">
      <h2>{{ cont.field_guidance_block_title.0['#context']['value']  }}</h2>
      <p class="guidance-block-teaser">{{ cont.field_guidance_block_teaser.0['#text'] | raw }}</p>
      <a href="{{ cont.field_guidance_block_link.0['#url'] }}" class="guidance-ctt-button">CTT</a>
    </div>
  {% endif %}
  <h2 class="guidance-block-title">{{ cont.field_guidance_block_title.0['#context']['value'] }}</h2>
{% endmacro %}