<?php

/**
 * @file
 * Main module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_access().
 */
function rocketship_job_advanced_webform_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Restrict access to editing this webform.
  /** @var \Drupal\webform\WebformInterface $entity */
  if (!$account->hasPermission('administer webform') && $entity->id() === 'apply_for_this_job' && ($operation === 'update' || $operation === 'delete')) {
    return AccessResult::forbidden('This webform is part of a premade feature and can not be edited or deleted.')
      ->addCacheContexts(['user.permissions']);
  }
}

/**
 * Implements hook_theme().
 */
function rocketship_job_advanced_theme($existing, $type, $theme, $path) {
  return [
    'job_facets_result_item' => [
      'base hook' => 'facets_result_item',
      'variables' => [
        'facet' => NULL,
        'raw_value' => '',
        'value' => '',
        'show_count' => FALSE,
        'count' => NULL,
        'is_active' => FALSE,
      ],
    ],
  ];
}

/**
 * Implements hook_search_api_query_alter().
 */
function rocketship_job_advanced_search_api_query_alter(QueryInterface &$query) {
  if ($query->getSearchId() === 'views_block:job_overview__job_overview_block') {
    $key = \Drupal::request()->query->get('keys', FALSE);
    if ($key) {
      $query->keys($key);
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function rocketship_job_advanced_menu_local_tasks_alter(&$local_tasks) {
  if (isset($local_tasks['tabs'][0]['webform_view:webform_views:view.job_applications.application_page'])) {
    // Only show Application link on Job nodes.
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && is_string($node)) {
      $node = Node::load($node);
    }
    if ($node instanceof NodeInterface && $node->bundle() !== 'job') {
      unset($local_tasks['tabs'][0]['webform_view:webform_views:view.job_applications.application_page']);
    }
  }
  if (isset($local_tasks['tabs'][0]['views_view:view.job_applications.application_page'])) {
    // Only show Application link on Job nodes.
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && is_string($node)) {
      $node = Node::load($node);
    }
    if ($node instanceof NodeInterface && $node->bundle() !== 'job') {
      unset($local_tasks['tabs'][0]['views_view:view.job_applications.application_page']);
    }
  }
}

/**
 * Load library for extra JS.
 */
function rocketship_job_advanced_page_attachments(array &$attachments) {

  // Get our library from the discovery list.
  $module_library = \Drupal::service('library.discovery')
    ->getLibraryByName('rocketship_job_advanced', 'f012');

  // If our library exists, attach it.
  if (isset($module_library)) {
    $attachments['#attached']['library'][] = 'rocketship_job_advanced/f012';
  }
}

/**
 * Implements hook_form_alter().
 */
function rocketship_job_advanced_form_webform_submission_apply_for_this_job_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form['scroll_to'] = [
    // Fingers crossed nobody puts two of these on the same page. Can't use
    // Unique ID method cuz this alter gets called twice per request.
    '#markup' => '<div id="apply-to" class="scroll-to-anchor"></div>',
    '#weight' => -9999,
  ];

}
