diff --git a/README.md b/README.md
index 306ac31..61f7cf8 100755
--- a/README.md
+++ b/README.md
@@ -1,60 +1,85 @@
-CAPTCHA module for Drupal
----------------------------
-[![Build Status]
-(https://travis-ci.org/chuva-inc/captcha.svg?branch=8.x-1.x)]
-(https://travis-ci.org/chuva-inc/captcha)
+CONTENTS OF THIS FILE
+---------------------
 
-[![Code Climate]
-(https://codeclimate.com/github/chuva-inc/captcha/badges/gpa.svg)]
-(https://codeclimate.com/github/chuva-inc/captcha)
+ * Introduction
+ * Requirements
+ * Conflicts/Known issues
+ * Installation
+ * Configuration
+ * Maintainers
 
-DESCRIPTION
------------
-  captcha.module is the basic CAPTCHA module, offering general CAPTCHA
-  administration and a simple maths challenge.
 
-SUB MODULE
-----------
-  image_captcha.module offers an image based challenge.
+INTRODUCTION
+------------
+
+A CAPTCHA is a challenge-response test most often placed within web forms to
+determine whether the user is human. The purpose of CAPTCHA is to block form
+submissions by spambots, which are automated scripts that post spam content
+everywhere they can. The CAPTCHA module provides this feature to virtually any
+user facing web form on a Drupal site.
+
+ * For a full description of the module, visit the project page:
+   https://www.drupal.org/project/captcha
+
+ * To submit bug reports and feature suggestions, or to track changes:
+   https://www.drupal.org/project/issues/captcha
 
-INSTALLATION:
--------------
-  1. Extract the tar.gz into your 'modules' or directory and copy to modules
-     folder.
-  2. Go to "Extend" after successfully login into admin.
-  3. Enable the module at 'administer >> modules'.
 
-DEPENDENCIES
+REQUIREMENTS
 ------------
-  The basic CAPTCHA module has no dependencies, nothing special is required.
+
+This module requires no modules outside of Drupal core.
+
 
 CONFLICTS/KNOWN ISSUES
 ----------------------
-  CAPTCHA and page caching do not work together currently.
-  However, the CAPTCHA module does support the Drupal core page
-  caching mechanism: it just disables the caching of the pages
-  where it has to put its challenges.
-  If you use other caching mechanisms, it is possible that CAPTCHA's
-  won't work, and you get error messages like 'CAPTCHA validation
-  error: unknown CAPTCHA session ID'.
 
-CONFIGURATION
--------------
-  The configuration page is at admin/config/people/captcha,
+CAPTCHA and page caching do not work together currently. However, the CAPTCHA
+module does support the Drupal core page caching mechanism: it just disables the
+caching of the pages where it has to put its challenges.
+
+If you use other caching mechanisms, it is possible that CAPTCHA's won't work,
+and you get error messages like 'CAPTCHA validation error: unknown CAPTCHA
+session ID'.
+
+
+
+INSTALLATION
+------------
+
+ * Install the CAPTCHA module as you would normally install a contributed
+   Drupal module. Visit https://www.drupal.org/node/1897420 for further
+   information.
+
+The configuration page is at admin/config/people/captcha,
   where you can configure the CAPTCHA module
   and enable challenges for the desired forms.
   You can also tweak the image CAPTCHA to your liking.
 
-UNINSTALLATION
---------------
-  1. Disable the module from 'administer >> modules'.
-  2. Uninstall the module
+CONFIGURATION
+-------------
+
+    1. Navigate to Administration > Extend and enable the module.
+    2. Navigate to Administration > Configuration > People > Captcha module
+       settings to administer how and when Captcha is used.
+    3. Select the challenge type you want for each of the listed forms.
+    4. Select " Add a description to the CAPTCHA" to add a configurable
+       description to explain the purpose of the CAPTCHA to the visitor.
+    5. For Default CAPTCHA validation, define how the response should be
+       processed by default. Note that the modules that provide the actual
+       challenges can override or ignore this.
+    6. Save configuration.
+
 
 MAINTAINERS
 -----------
-  Current maintainers:
+
    * Fabiano Sant'Ana (wundo) - https://www.drupal.org/u/wundo
    * Andrii Podanenko (podarok) - https://www.drupal.org/u/podarok
    * soxofaan - https://www.drupal.org/u/soxofaan
    * Lachlan Ennis (elachlan) - https://www.drupal.org/u/elachlan
    * Rob Loach (RobLoach) - https://www.drupal.org/u/robloach
+
+Supporting organizations:
+
+ * Chuva Inc. - https://www.drupal.org/chuva-inc
diff --git a/captcha.api.php b/captcha.api.php
index 23ace70..8e46a9f 100644
--- a/captcha.api.php
+++ b/captcha.api.php
@@ -107,10 +107,10 @@ function foo_captcha_help($route_name, RouteMatchInterface $route_match) {
  * modules. More advanced CAPTCHA modules can also use extra provided arguments
  * $element and $form_state:
  *
- * @param $solution
- *   the solution for the challenge as reported by hook_captcha('generate',...).
- * @param $response
- *   the answer given by the user.
+ * @param string $solution
+ *   The solution for the challenge as reported by hook_captcha('generate',...).
+ * @param string $response
+ *   The answer given by the user.
  *
  * @return true
  *   on success and FALSE on failure.
@@ -126,19 +126,19 @@ function foo_captcha_custom_validation($solution, $response) {
  * validation function of the #captcha element. See captcha_validate() in
  * captcha.module for more info about this.
  *
- * @param $solution
- *   the solution for the challenge as reported by hook_captcha('generate',...).
- * @param $response
- *   the answer given by the user.
- * @param $element
- *   element argument.
- * @param $form_state
- *   form_state argument.
+ * @param string $solution
+ *   The solution for the challenge as reported by hook_captcha('generate',...).
+ * @param string $response
+ *   The answer given by the user.
+ * @param array $element
+ *   The element argument.
+ * @param array $form_state
+ *   The form_state argument.
  *
  * @return true
  *   on success and FALSE on failure.
  */
-function foo_captcha_custom_advance_validation($solution, $response, $element, $form_state) {
+function foo_captcha_custom_advance_validation($solution, $response, array $element, array $form_state) {
   return $form_state['foo']['#bar'] = 'baz';
 }
 
diff --git a/captcha.inc b/captcha.inc
index f4f34fd..c6b1e2f 100755
--- a/captcha.inc
+++ b/captcha.inc
@@ -84,12 +84,12 @@ function _captcha_generate_captcha_session($form_id = NULL, $status = CAPTCHA_ST
 
   // Insert an entry and thankfully receive the value
   // of the autoincrement field 'csid'.
-  $captcha_sid = db_insert('captcha_sessions')
+  $captcha_sid = \Drupal::database()->insert('captcha_sessions')
     ->fields([
       'uid' => $user->id(),
       'sid' => session_id(),
-      'ip_address' => Drupal::request()->getClientIp(),
-      'timestamp' => REQUEST_TIME,
+      'ip_address' => \Drupal::request()->getClientIp(),
+      'timestamp' => \Drupal::time()->getRequestTime(),
       'form_id' => $form_id,
       'solution' => $solution,
       'status' => $status,
@@ -108,10 +108,10 @@ function _captcha_generate_captcha_session($form_id = NULL, $status = CAPTCHA_ST
  *   The new solution to associate with the given CAPTCHA session.
  */
 function _captcha_update_captcha_session($captcha_sid, $solution) {
-  db_update('captcha_sessions')
+  \Drupal::database()->update('captcha_sessions')
     ->condition('csid', $captcha_sid)
     ->fields([
-      'timestamp' => REQUEST_TIME,
+      'timestamp' => \Drupal::time()->getRequestTime(),
       'solution' => $solution,
     ])
     ->execute();
@@ -134,7 +134,13 @@ function _captcha_required_for_user($captcha_sid, $form_id) {
   }
 
   // Get the status of the current CAPTCHA session.
-  $captcha_session_status = db_query('SELECT status FROM {captcha_sessions} WHERE csid = :csid', [':csid' => $captcha_sid])->fetchField();
+  $captcha_session_status = \Drupal::database()
+    ->select('captcha_sessions', 'cs')
+    ->fields('cs', ['status'])
+    ->condition('csid', $captcha_sid)
+    ->execute()
+    ->fetchField();
+
   // Second check: if the current session is already
   // solved: omit further CAPTCHAs.
   if ($captcha_session_status == CAPTCHA_STATUS_SOLVED) {
@@ -242,7 +248,7 @@ function _captcha_get_captcha_placement($form_id, $form) {
       if (count($buttons)) {
         // Pick first button.
         // TODO: make this more sofisticated? Use cases needed.
-        $placement = $buttons[0];
+        $placement = (isset($buttons[count($buttons) - 1])) ? $buttons[count($buttons) - 1] : $buttons[0];
       }
       else {
         // Use NULL when no buttons were found.
diff --git a/captcha.links.task.yml b/captcha.links.task.yml
index 838cc19..da18f9d 100755
--- a/captcha.links.task.yml
+++ b/captcha.links.task.yml
@@ -10,5 +10,5 @@ captcha_examples:
 
 captcha_points.list:
   route_name: captcha_point.list
-  title: 'CAPTCHA Points'
+  title: 'Form settings'
   base_route: captcha_settings
diff --git a/captcha.module b/captcha.module
index fb940e9..f533427 100755
--- a/captcha.module
+++ b/captcha.module
@@ -14,8 +14,11 @@ use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
+use Drupal\Core\Render\Markup;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
+use Drupal\Core\Render\Element;
+use Drupal\Core\Form\BaseFormIdInterface;
 
 /**
  * Constants for CAPTCHA persistence.
@@ -43,6 +46,9 @@ define('CAPTCHA_STATUS_EXAMPLE', 2);
 define('CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE', 0);
 define('CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE', 1);
 
+// Default captcha field access.
+define('CAPTCHA_FIELD_DEFAULT_ACCESS', 1);
+
 /**
  * Implements hook_help().
  */
@@ -52,20 +58,20 @@ function captcha_help($route_name, RouteMatchInterface $route_match) {
       $output = '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t('"CAPTCHA" is an acronym for "Completely Automated Public Turing test to tell Computers and Humans Apart". It is typically a challenge-response test to determine whether the user is human. The CAPTCHA module is a tool to fight automated submission by malicious users (spamming) of for example comments forms, user registration forms, guestbook forms, etc. You can extend the desired forms with an additional challenge, which should be easy for a human to solve correctly, but hard enough to keep automated scripts and spam bots out.') . '</p>';
       $output .= '<p>' . t('Note that the CAPTCHA module interacts with page caching (see <a href=":performancesettings">performance settings</a>). Because the challenge should be unique for each generated form, the caching of the page it appears on is prevented. Make sure that these forms do not appear on too many pages or you will lose much caching efficiency. For example, if you put a CAPTCHA on the user login block, which typically appears on each page for anonymous visitors, caching will practically be disabled. The comment submission forms are another example. In this case you should set the <em>Location of comment submission form</em> to <em>Display on separate page</em> in the comment settings of the relevant <a href=":contenttypes">content types</a> for better caching efficiency.', [
-          ':performancesettings' => \Drupal::url('system.performance_settings'),
-          ':contenttypes' => \Drupal::url('entity.node_type.collection'),
-        ]) . '</p>';
+        ':performancesettings' => Url::fromRoute('system.performance_settings')->toString(),
+        ':contenttypes' => Url::fromRoute('entity.node_type.collection')->toString(),
+      ]) . '</p>';
       $output .= '<p>' . t('CAPTCHA is a trademark of Carnegie Mellon University.') . '</p>';
       return ['#markup' => $output];
 
     case 'captcha_settings':
       $output = '<p>' . t('A CAPTCHA can be added to virtually each Drupal form. Some default forms are already provided in the form list, but arbitrary forms can be easily added and managed when the option <em>Add CAPTCHA administration links to forms</em> is enabled.') . '</p>';
       $output .= '<p>' . t('Users with the <em>Skip CAPTCHA</em> <a href=":perm">permission</a> won\'t be offered a challenge. Be sure to grant this permission to the trusted users (e.g. site administrators). If you want to test a protected form, be sure to do it as a user without the <em>Skip CAPTCHA</em> permission (e.g. as anonymous user).', [
-          ':perm' => \Drupal::url('user.admin_permissions'),
-        ]) . '</p>';
+        ':perm' => Url::fromRoute('user.admin_permissions')->toString(),
+      ]) . '</p>';
       $output .= '<p><b>' . t('Note that the CAPTCHA module disables <a href=":performancesettings">page caching</a> of pages that include a CAPTCHA challenge.', [
-          ':performancesettings' => \Drupal::url('system.performance_settings'),
-        ]) . '</b></p>';
+        ':performancesettings' => Url::fromRoute('system.performance_settings')->toString(),
+      ]) . '</b></p>';
       return ['#markup' => $output];
   }
 }
@@ -102,10 +108,13 @@ function captcha_theme() {
  * Remove old entries from captcha_sessions table.
  */
 function captcha_cron() {
+  // Get request time.
+  $request_time = \Drupal::time()->getRequestTime();
+
   // Remove challenges older than 1 day.
   $connection = Database::getConnection();
   $connection->delete('captcha_sessions')
-    ->condition('timestamp', REQUEST_TIME - 60 * 60 * 24, '<')
+    ->condition('timestamp', $request_time - 60 * 60 * 24, '<')
     ->execute();
 }
 
@@ -119,12 +128,21 @@ function template_preprocess_captcha(&$variables) {
   $element = $variables['element'];
 
   if (!empty($element['#description']) && isset($element['captcha_widgets'])) {
+    $children_keys = Element::children($element);
+    $captcha_children_output = '';
+    foreach ($children_keys as $key) {
+      if (!empty($element[$key])) {
+        $captcha_children_output .= \Drupal::service('renderer')->render($element[$key]);
+      }
+    }
+
     $variables['details'] = [
       '#type' => 'details',
       '#title' => t('CAPTCHA'),
       '#description' => $element['#description'],
-      '#children' => drupal_render_children($element),
+      '#children' => Markup::create($captcha_children_output),
       '#attributes' => [
+        'id' => ['captcha'],
         'class' => ['captcha'],
         'open' => [''],
       ],
@@ -146,13 +164,48 @@ function captcha_form_alter(array &$form, FormStateInterface $form_state, $form_
   // Visitor does not have permission to skip CAPTCHAs.
   module_load_include('inc', 'captcha');
   if (!$account->hasPermission('skip CAPTCHA')) {
+    $query = \Drupal::entityQuery('captcha_point');
+    $query->condition('label', $form_id);
+    $entity_ids = $query->execute();
+
+    // If empty, see if it is a form provided by default config.
+    if (empty($entity_ids)) {
+      $query = \Drupal::entityQuery('captcha_point');
+      $query->condition('formId', $form_id);
+      $entity_ids = $query->execute();
+    }
+
+    if (!empty($entity_ids) && is_array($entity_ids)) {
+      $captcha_point_id = array_pop($entity_ids);
+      /* @var CaptchaPoint $captcha_point */
+      $captcha_point = \Drupal::entityTypeManager()
+        ->getStorage('captcha_point')
+        ->load($captcha_point_id);
+    }
 
-    /* @var CaptchaPoint $captcha_point */
-    $captcha_point = \Drupal::entityTypeManager()
-      ->getStorage('captcha_point')
-      ->load($form_id);
+    // If there is no CaptchaPoint for the form_id, try to use the base_form_id.
+    if (empty($captcha_point) || !$captcha_point->status()) {
+      $form_object = $form_state->getFormObject();
+      if ($form_object instanceof BaseFormIdInterface) {
+        $base_form_id = $form_object->getBaseFormId();
+        if (!empty($base_form_id) && $base_form_id != $form_id) {
+          $captcha_point = \Drupal::entityTypeManager()
+            ->getStorage('captcha_point')
+            ->load($base_form_id);
+        }
+      }
+    }
+
+    if (empty($captcha_point) && $config->get('enabled_default')) {
+      // Create fake captcha point without saving.
+      $captcha_point = new CaptchaPoint([
+        'formId' => $form_id,
+        'captchaType' => $config->get('default_challenge'),
+      ], 'captcha_point');
+      $captcha_point->enable();
+    }
 
-    if ($captcha_point && $captcha_point->status()) {
+    if (!empty($captcha_point) && $captcha_point->status()) {
       // Build CAPTCHA form element.
       $captcha_element = [
         '#type' => 'captcha',
@@ -172,7 +225,7 @@ function captcha_form_alter(array &$form, FormStateInterface $form_state, $form_
   }
   elseif ($config->get('administration_mode') && $account->hasPermission('administer CAPTCHA settings')
     && (!\Drupal::service('router.admin_context')
-        ->isAdminRoute() || $config->get('allow_on_admin_pages'))
+      ->isAdminRoute() || $config->get('allow_on_admin_pages'))
   ) {
     // Add CAPTCHA administration tools.
     /* @var \Drupal\captcha\Entity\CaptchaPoint $captcha_point */
@@ -215,7 +268,7 @@ function captcha_form_alter(array &$form, FormStateInterface $form_state, $form_
           t('Place a CAPTCHA here for untrusted users.'),
           Url::fromRoute('captcha_point.add', [], [
             'query' => Drupal::destination()
-                ->getAsArray() + ['form_id' => $form_id],
+              ->getAsArray() + ['form_id' => $form_id],
           ])
         )->toString(),
       ];
@@ -232,7 +285,7 @@ function captcha_form_alter(array &$form, FormStateInterface $form_state, $form_
     $form['caching']['captcha'] = [
       '#type' => 'item',
       '#title' => t('CAPTCHA'),
-      '#markup' => '<div class="messages messages--warning">' . t('The CAPTCHA module will disable the caching of pages that contain a CAPTCHA element.') . '</div>',
+      '#markup' => '<div class="messages messages--warning">' . t('Most CAPTCHA methods will disable the caching of pages that contain a CAPTCHA element. Check the different implementations to know more about how it affects caching.') . '</div>',
     ];
   }
 }
@@ -313,7 +366,7 @@ function captcha_validate_case_insensitive_ignore_spaces($solution, $response) {
  *
  * @param array $element
  *   The CAPTCHA element.
- * @param FormStateInterface $form_state
+ * @param Drupal\Core\Form\FormStateInterface $form_state
  *   The form state structure to extract the info from.
  * @param string $this_form_id
  *   The form ID of the form we are currently processing
@@ -356,19 +409,31 @@ function _captcha_get_posted_captcha_info(array $element, FormStateInterface $fo
       // and the database query should also be more efficient (because there is
       // an index on the CAPTCHA session ID).
       if ($posted_captcha_sid != NULL) {
-        $expected_captcha_token = db_query(
-          "SELECT token FROM {captcha_sessions} WHERE csid = :csid",
-          [':csid' => $posted_captcha_sid]
-        )->fetchField();
-        if ($expected_captcha_token !== $posted_captcha_token) {
-          drupal_set_message(t('CAPTCHA session reuse attack detected.'), 'error');
+        $expected_captcha_token = \Drupal::database()
+          ->select('captcha_sessions', 'cs')
+          ->fields('cs', ['token'])
+          ->condition('csid', $posted_captcha_sid)
+          ->execute()
+          ->fetchField();
+
+        // If we do have a CAPTCHA token mismatch then log it.
+        try {
+          if (($expected_captcha_token !== $posted_captcha_token) && empty($input['captcha_cacheable'])) {
+            throw new \UnexpectedValueException('CAPTCHA session reuse attack detected.');
+          }
+        }
+        catch (\Exception $e) {
+          \Drupal::logger('captcha')->debug(
+            'CAPTCHA session reuse attack detected on @form_id <br/>Posted CAPTCHA token: @posted_captcha_token <br/>Expected captcha token: @expected_captcha_token',
+            [
+              '@form_id' => $this_form_id,
+              '@expected_captcha_token' => var_export($expected_captcha_token, TRUE),
+              '@posted_captcha_token' => var_export($posted_captcha_token, TRUE),
+            ]
+          );
           // Invalidate the CAPTCHA session.
           $posted_captcha_sid = NULL;
         }
-        // Invalidate CAPTCHA token to avoid reuse.
-        db_update('captcha_sessions')
-          ->fields(['token' => NULL])
-          ->condition('csid', $posted_captcha_sid);
       }
     }
     else {
@@ -400,12 +465,18 @@ function captcha_validate($element, FormStateInterface &$form_state) {
   // TODO: is this correct in all cases: see comments in previous revisions?
   $csid = $captcha_info['captcha_sid'];
 
-  $solution = db_query(
-    'SELECT solution FROM {captcha_sessions} WHERE csid = :csid',
-    [':csid' => $csid]
-  )
+  $solution = \Drupal::database()
+    ->select('captcha_sessions', 'cs')
+    ->fields('cs', ['solution'])
+    ->condition('csid', $csid)
+    ->execute()
     ->fetchField();
 
+  // Bypass captcha validation if access attribute value is false.
+  if (empty($captcha_info['access'])) {
+    return FALSE;
+  }
+
   // @todo: what is the result when there is no entry for
   // the captcha_session? in D6 it was FALSE, what in D7?
   if ($solution === FALSE) {
@@ -431,7 +502,7 @@ function captcha_validate($element, FormStateInterface &$form_state) {
       // Correct answer.
       $_SESSION['captcha_success_form_ids'][$form_id] = $form_id;
       // Record success.
-      db_update('captcha_sessions')
+      \Drupal::database()->update('captcha_sessions')
         ->condition('csid', $csid)
         ->fields(['status' => CAPTCHA_STATUS_SOLVED])
         ->expression('attempts', 'attempts + 1')
@@ -439,7 +510,7 @@ function captcha_validate($element, FormStateInterface &$form_state) {
     }
     else {
       // Wrong answer.
-      db_update('captcha_sessions')
+      \Drupal::database()->update('captcha_sessions')
         ->condition('csid', $csid)
         ->expression('attempts', 'attempts + 1')
         ->execute();
@@ -448,7 +519,7 @@ function captcha_validate($element, FormStateInterface &$form_state) {
       // Update wrong response counter.
       if (\Drupal::config('captcha.settings')->get('enable_stats', FALSE)) {
         Drupal::state()->set('captcha.wrong_response_counter', Drupal::state()
-            ->get('captcha.wrong_response_counter', 0) + 1);
+          ->get('captcha.wrong_response_counter', 0) + 1);
       }
 
       if (\Drupal::config('captcha.settings')
diff --git a/captcha.services.yml b/captcha.services.yml
index 5310320..4bc17e4 100644
--- a/captcha.services.yml
+++ b/captcha.services.yml
@@ -1,5 +1,6 @@
 services:
   captcha.config_subscriber:
     class: Drupal\captcha\EventSubscriber\CaptchaCachedSettingsSubscriber
+    arguments: ['@element_info']
     tags:
       - { name: event_subscriber }
diff --git a/config/install/captcha.settings.yml b/config/install/captcha.settings.yml
index ac797b0..ffbfcfb 100755
--- a/config/install/captcha.settings.yml
+++ b/config/install/captcha.settings.yml
@@ -1,3 +1,4 @@
+enabled_default: 0
 default_challenge: 'captcha/Math'
 description: 'This question is for testing whether or not you are a human visitor and to prevent automated spam submissions.'
 administration_mode: false
diff --git a/config/schema/captcha.settings.yml b/config/schema/captcha.settings.yml
index 3cdcddb..b91cb03 100755
--- a/config/schema/captcha.settings.yml
+++ b/config/schema/captcha.settings.yml
@@ -5,6 +5,9 @@ captcha.settings:
   type: config_object
   label: 'External Links Settings'
   mapping:
+    enabled_default:
+      type: integer
+      label: 'Add captcha to all forms.'
     default_challenge:
       type: string
       label: 'The default challenge for captcha.'
diff --git a/image_captcha/image_captcha.admin.inc b/image_captcha/image_captcha.admin.inc
index 6c3dd0b..e4c6c93 100755
--- a/image_captcha/image_captcha.admin.inc
+++ b/image_captcha/image_captcha.admin.inc
@@ -5,6 +5,8 @@
  * Contains functions used in the backend forms.
  */
 
+use Symfony\Component\HttpFoundation\Response;
+
 /**
  * Menu handler for font preview request.
  *
@@ -57,8 +59,8 @@ function image_captcha_font_preview($font_token) {
     imagettftext($image, $font_size, 0, 1, 1.5 * $font_size, $color, realpath($font), $text);
   }
 
-  // Set content type.
-  drupal_add_http_header('Content-Type', 'image/png');
+  $response = new Response();
+  $response->headers->set('Content-Type', 'image/png');
   // Dump image data to client.
   imagepng($image);
   // Release image memory.
diff --git a/image_captcha/image_captcha.install b/image_captcha/image_captcha.install
index 86bde68..003f224 100755
--- a/image_captcha/image_captcha.install
+++ b/image_captcha/image_captcha.install
@@ -20,10 +20,10 @@ function image_captcha_requirements($phase) {
         'title' => \Drupal::translation()
           ->translate('Image CAPTCHA requires GD library'),
         'description' =>
-          \Drupal::translation()
-            ->translate('The Image CAPTCHA module can not be installed because your PHP setup does not provide the <a href="!gddoc">GD library</a>, which is required to generate images.',
+        \Drupal::translation()
+          ->translate('The Image CAPTCHA module can not be installed because your PHP setup does not provide the <a href="!gddoc">GD library</a>, which is required to generate images.',
               ['!gddoc' => 'http://www.php.net/manual/en/book.image.php']
-            ),
+        ),
         'severity' => REQUIREMENT_ERROR,
       ];
     }
diff --git a/image_captcha/image_captcha.libraries.yml b/image_captcha/image_captcha.libraries.yml
index 44ff61d..4f37b86 100755
--- a/image_captcha/image_captcha.libraries.yml
+++ b/image_captcha/image_captcha.libraries.yml
@@ -3,10 +3,15 @@ base:
   js:
     image_captcha.js: {}
   css:
-    all:
+    theme:
       image_captcha.css: {}
   dependencies:
     - core/jquery
     - core/drupal
     - core/drupalSettings
     - core/jquery.once
+
+image-captcha-refresh:
+  version: 1.0
+  js:
+    js/image_captcha_refresh.js: {}
diff --git a/image_captcha/image_captcha.module b/image_captcha/image_captcha.module
index 83e0214..8832ac8 100755
--- a/image_captcha/image_captcha.module
+++ b/image_captcha/image_captcha.module
@@ -7,6 +7,7 @@
 
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
+use Drupal\Core\Link;
 
 define('IMAGE_CAPTCHA_ALLOWED_CHARACTERS', 'aAbBCdEeFfGHhijKLMmNPQRrSTtWXYZ23456789');
 
@@ -55,7 +56,7 @@ function _image_captcha_get_enabled_fonts() {
  * @return array
  *   List($readable_fonts, $problem_fonts).
  */
-function _image_captcha_check_fonts($fonts) {
+function _image_captcha_check_fonts(array $fonts) {
   $readable_fonts = [];
   $problem_fonts = [];
 
@@ -171,7 +172,7 @@ function _image_captcha_check_setup($check_fonts = TRUE) {
  *   The utf8 string which will be used to split in characters.
  *
  * @return array
- *   Array($width, $heigh).
+ *   [$width, $heigh].
  */
 function _image_captcha_image_size($code) {
   $config = \Drupal::config('image_captcha.settings');
@@ -211,8 +212,8 @@ function image_captcha_captcha($op, $captcha_type = '', $captcha_sid = NULL) {
         // the request for the image itself won't succeed (only ?q=user
         // is permitted for unauthenticated users). We fall back to the
         // Math CAPTCHA in that case.
-        if (defined('MAINTENANCE_MODE') && \Drupal::currentUser()
-            ->isAnonymous()
+        if (\Drupal::state()->get('system.maintenance_mode')
+        && \Drupal::currentUser()->isAnonymous()
         ) {
           return captcha_captcha('generate', 'Math');
         }
@@ -237,7 +238,7 @@ function image_captcha_captcha($op, $captcha_type = '', $captcha_sid = NULL) {
           '#theme' => 'image',
           '#uri' => Url::fromRoute('image_captcha.generator', [
             'session_id' => $captcha_sid,
-            'timestamp' => REQUEST_TIME,
+            'timestamp' => \Drupal::time()->getRequestTime(),
           ])->toString(),
           '#width' => $width,
           '#height' => $height,
@@ -276,3 +277,65 @@ function image_captcha_captcha($op, $captcha_type = '', $captcha_sid = NULL) {
       break;
   }
 }
+
+/**
+ * Implements hook_theme().
+ */
+function image_captcha_theme() {
+  return [
+    'image_captcha_refresh' => [
+      'variables' => ['captcha_refresh_link' => NULL],
+    ],
+  ];
+}
+
+/**
+ * Implements hook_element_info_alter().
+ */
+function image_captcha_element_info_alter(array &$element) {
+  if (isset($element['captcha'])) {
+    $element['captcha']['#process'][] = 'image_captcha_after_build_process';
+  }
+}
+
+/**
+ * Add image refresh button to captcha form element.
+ *
+ * @return array
+ *   The processed element.
+ *
+ * @see captcha_element_info()
+ * @see image_captcha_element_info_alter()
+ */
+function image_captcha_after_build_process($element) {
+  $form_id = $element['#captcha_info']['form_id'];
+  $captcha_point = captcha_get_form_id_setting($form_id);
+
+  $is_image_captcha = FALSE;
+  if (isset($captcha_point->captchaType) && $captcha_point->captchaType == 'image_captcha/Image') {
+    $is_image_captcha = TRUE;
+  }
+  elseif (isset($captcha_point->captchaType) && $captcha_point->captchaType == 'default') {
+    $default_challenge = \Drupal::service('config.manager')
+      ->getConfigFactory()
+      ->get('captcha.settings')
+      ->get('default_challenge');
+    if ($default_challenge == 'image_captcha/Image') {
+      $is_image_captcha = TRUE;
+    }
+  }
+
+  if ($is_image_captcha && isset($element['captcha_widgets']['captcha_image'])) {
+    $uri = Link::fromTextAndUrl(t('Get new captcha!'),
+      new Url('image_captcha.refresh',
+        ['form_id' => $form_id],
+        ['attributes' => ['class' => ['reload-captcha']]]
+      )
+    );
+    $element['captcha_widgets']['captcha_refresh'] = [
+      '#theme' => 'image_captcha_refresh',
+      '#captcha_refresh_link' => $uri,
+    ];
+  }
+  return $element;
+}
diff --git a/image_captcha/image_captcha.routing.yml b/image_captcha/image_captcha.routing.yml
index 4a8e52d..bd6c3ad 100755
--- a/image_captcha/image_captcha.routing.yml
+++ b/image_captcha/image_captcha.routing.yml
@@ -18,3 +18,10 @@ image_captcha.generator:
     _controller: '\Drupal\image_captcha\Controller\CaptchaImageGeneratorController::image'
   requirements:
     _access: 'TRUE'
+
+image_captcha.refresh:
+  path: '/image-captcha-refresh/{form_id}'
+  defaults:
+    _controller: '\Drupal\image_captcha\Controller\CaptchaImageRefresh::refreshCaptcha'
+  requirements:
+    _access: 'TRUE'
diff --git a/image_captcha/js/image_captcha_refresh.js b/image_captcha/js/image_captcha_refresh.js
new file mode 100644
index 0000000..457c58e
--- /dev/null
+++ b/image_captcha/js/image_captcha_refresh.js
@@ -0,0 +1,46 @@
+/**
+ * @file
+ * Attaches behaviors for the zipang captcha refresh module.
+ */
+
+(function ($) {
+  'use strict';
+
+  /**
+   * Attaches jQuery validate behavoir to forms.
+   *
+   * @type {Drupal~behavior}
+   *
+   * @prop {Drupal~behaviorAttach} attach
+   *  Attaches the outline behavior to the right context.
+   */
+  Drupal.behaviors.CaptchaRefresh = {
+
+    attach: function (context) {
+      $('.reload-captcha', context).not('.processed').bind('click', function () {
+        $(this).addClass('processed');
+        var $form = $(this).parents('form');
+        // Send post query for getting new captcha data.
+        var date = new Date();
+        var baseUrl = document.location.origin;
+        var url = baseUrl + '/' + $(this).attr('href') + '?' + date.getTime();
+        $.get(
+          url,
+          {},
+          function (response) {
+            if (response.status === 1) {
+              $('.captcha', $form).find('img').attr('src', response.data.url);
+              $('input[name=captcha_sid]', $form).val(response.data.sid);
+              $('input[name=captcha_token]', $form).val(response.data.token);
+            }
+            else {
+              alert(response.message);
+            }
+          },
+          'json'
+        );
+        return false;
+      });
+    }
+  };
+})(jQuery);
diff --git a/image_captcha/src/Controller/CaptchaImageGeneratorController.php b/image_captcha/src/Controller/CaptchaImageGeneratorController.php
index 408c115..49bef40 100644
--- a/image_captcha/src/Controller/CaptchaImageGeneratorController.php
+++ b/image_captcha/src/Controller/CaptchaImageGeneratorController.php
@@ -4,7 +4,7 @@ namespace Drupal\image_captcha\Controller;
 
 use Drupal\Core\Config\Config;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
-use Drupal\Core\Logger\LoggerChannelInterface;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\PageCache\ResponsePolicy\KillSwitch;
 use Drupal\image_captcha\Response\CaptchaImageResponse;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -17,14 +17,14 @@ class CaptchaImageGeneratorController implements ContainerInjectionInterface {
   /**
    * Image Captcha config storage.
    *
-   * @var Config
+   * @var \Drupal\Core\Config\Config
    */
   protected $config;
 
   /**
    * Watchdog logger channel for captcha.
    *
-   * @var LoggerChannelInterface
+   * @var \Psr\Log\LoggerInterface
    */
   protected $logger;
 
@@ -38,7 +38,7 @@ class CaptchaImageGeneratorController implements ContainerInjectionInterface {
   /**
    * {@inheritdoc}
    */
-  public function __construct(Config $config, LoggerChannelInterface $logger, KillSwitch $kill_switch) {
+  public function __construct(Config $config, LoggerInterface $logger, KillSwitch $kill_switch) {
     $this->config = $config;
     $this->logger = $logger;
     $this->killSwitch = $kill_switch;
@@ -58,7 +58,7 @@ class CaptchaImageGeneratorController implements ContainerInjectionInterface {
   /**
    * Main method that throw ImageResponse object to generate image.
    *
-   * @return CaptchaImageResponse
+   * @return \Drupal\image_captcha\Response\CaptchaImageResponse
    *   Make a CaptchaImageResponse with the correct configuration and return it.
    */
   public function image() {
diff --git a/image_captcha/src/Controller/CaptchaImageRefresh.php b/image_captcha/src/Controller/CaptchaImageRefresh.php
new file mode 100644
index 0000000..bdd6e65
--- /dev/null
+++ b/image_captcha/src/Controller/CaptchaImageRefresh.php
@@ -0,0 +1,63 @@
+<?php
+
+namespace Drupal\image_captcha\Controller;
+
+/**
+ * To change template file, choose Tools | Templates and open it in the editor.
+ */
+
+use Drupal\Core\Controller\ControllerBase;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Drupal\Core\Database\Database;
+
+/**
+ * Description of CaptchaImageRefresh.
+ */
+class CaptchaImageRefresh extends ControllerBase {
+
+  /**
+   * Put your code here.
+   */
+  public function refreshCaptcha($form_id = NULL) {
+    $result = [
+      'status' => 0,
+      'message' => '',
+    ];
+    try {
+      module_load_include('inc', 'captcha', 'captcha');
+      $config = \Drupal::config('image_captcha.settings');
+      $captcha_sid = _captcha_generate_captcha_session($form_id);
+      $captcha_token = md5(mt_rand());
+      $allowed_chars = _image_captcha_utf8_split($config->get('image_captcha_image_allowed_chars', IMAGE_CAPTCHA_ALLOWED_CHARACTERS));
+      $code_length = (int) $config->get('image_captcha_code_length');
+      $code = '';
+      for ($i = 0; $i < $code_length; $i++) {
+        $code .= $allowed_chars[array_rand($allowed_chars)];
+      }
+      $connection = Database::getConnection();
+      $connection->update('captcha_sessions')
+        ->fields([
+          'token' => $captcha_token,
+          'solution' => $code,
+        ])
+        ->condition('csid', $captcha_sid, '=')
+        ->execute();
+      $result['data'] = [
+        'url' => \Drupal::url('image_captcha.generator', ['session_id' => $captcha_sid, 'timestamp' => \Drupal::time()->getRequestTime()]),
+        'token' => $captcha_token,
+        'sid' => $captcha_sid,
+      ];
+      $result['status'] = 1;
+    }
+    catch (\Exception $e) {
+      if ($message = $e->getMessage()) {
+        $result['message'] = $message;
+      }
+      else {
+        $result['message'] = $this->t('Error has occurred. Please contact to site administrator.');
+      }
+    }
+    return new JsonResponse($result);
+  }
+
+}
diff --git a/image_captcha/src/Form/ImageCaptchaSettingsForm.php b/image_captcha/src/Form/ImageCaptchaSettingsForm.php
index 2200518..7bf51e2 100755
--- a/image_captcha/src/Form/ImageCaptchaSettingsForm.php
+++ b/image_captcha/src/Form/ImageCaptchaSettingsForm.php
@@ -336,7 +336,7 @@ class ImageCaptchaSettingsForm extends ConfigFormBase {
       // Put these fonts with preview image in the list.
       foreach ($fonts as $token => $font) {
 
-        $title = t('Font preview of @font (@file)', [
+        $title = $this->t('Font preview of @font (@file)', [
           '@font' => $font['name'],
           '@file' => $font['uri'],
         ]);
@@ -350,14 +350,14 @@ class ImageCaptchaSettingsForm extends ConfigFormBase {
       }
 
       // Append the PHP built-in font at the end.
-      $title = t('Preview of built-in font');
+      $title = $this->t('Preview of built-in font');
       $attributes = [
         'src' => Url::fromRoute('image_captcha.font_preview', ['token' => 'BUILTIN'])
           ->toString(),
         'alt' => $title,
         'title' => $title,
       ];
-      $available_fonts['BUILTIN'] = (string) t('PHP built-in font: font_preview', [
+      $available_fonts['BUILTIN'] = (string) $this->t('PHP built-in font: font_preview', [
         'font_preview' => '<img' . new Attribute($attributes) . ' />',
       ]);
 
diff --git a/image_captcha/src/Response/CaptchaImageResponse.php b/image_captcha/src/Response/CaptchaImageResponse.php
index d4c81db..691113d 100755
--- a/image_captcha/src/Response/CaptchaImageResponse.php
+++ b/image_captcha/src/Response/CaptchaImageResponse.php
@@ -3,7 +3,7 @@
 namespace Drupal\image_captcha\Response;
 
 use Drupal\Core\Config\Config;
-use Drupal\Core\Logger\LoggerChannelInterface;
+use Psr\Log\LoggerInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 
@@ -14,17 +14,19 @@ use Symfony\Component\HttpFoundation\Response;
  */
 class CaptchaImageResponse extends Response {
 
+  const LOG_LEVEL = 'ERROR';
+
   /**
    * Image Captcha config storage.
    *
-   * @var Config
+   * @var \Drupal\Core\Config\Config
    */
   protected $config;
 
   /**
    * Watchdog logger channel for captcha.
    *
-   * @var LoggerChannelInterface
+   * @var \Psr\Log\LoggerInterface
    */
   protected $logger;
 
@@ -38,7 +40,7 @@ class CaptchaImageResponse extends Response {
   /**
    * {@inheritdoc}
    */
-  public function __construct(Config $config, LoggerChannelInterface $logger, $callback = NULL, $status = 200, $headers = []) {
+  public function __construct(Config $config, LoggerInterface $logger, $callback = NULL, $status = 200, $headers = []) {
     parent::__construct(NULL, $status, $headers);
 
     $this->config = $config;
@@ -51,15 +53,18 @@ class CaptchaImageResponse extends Response {
   public function prepare(Request $request) {
     $session_id = $request->get('session_id');
 
-    $code = db_query("SELECT solution FROM {captcha_sessions} WHERE csid = :csid",
-      [':csid' => $session_id]
-    )->fetchField();
+    $code = \Drupal::database()
+      ->select('captcha_sessions', 'cs')
+      ->fields('cs', ['solution'])
+      ->condition('csid', $session_id)
+      ->execute()
+      ->fetchField();
 
     if ($code !== FALSE) {
       $this->image = @$this->generateImage($code);
 
       if (!$this->image) {
-        $this->logger->log(WATCHDOG_ERROR, 'Generation of image CAPTCHA failed. Check your image CAPTCHA configuration and especially the used font.', []);
+        $this->logger->log(self::LOG_LEVEL, 'Generation of image CAPTCHA failed. Check your image CAPTCHA configuration and especially the used font.', []);
       }
     }
 
@@ -374,7 +379,7 @@ class CaptchaImageResponse extends Response {
       // Get character dimensions for TrueType fonts.
       if ($font != 'BUILTIN') {
         putenv('GDFONTPATH=' . realpath('.'));
-        $bbox = imagettfbbox($font_size, 0, drupal_realpath($font), $character);
+        $bbox = imagettfbbox($font_size, 0, \Drupal::service('file_system')->realpath($font), $character);
         // In very rare cases with some versions of the GD library, the x-value
         // of the left side of the bounding box as returned by the first call of
         // imagettfbbox is corrupt (value -2147483648 = 0x80000000).
@@ -382,7 +387,7 @@ class CaptchaImageResponse extends Response {
         // can be used as workaround.
         // This issue is discussed at http://drupal.org/node/349218.
         if ($bbox[2] < 0) {
-          $bbox = imagettfbbox($font_size, 0, drupal_realpath($font), $character);
+          $bbox = imagettfbbox($font_size, 0, \Drupal::service('file_system')->realpath($font), $character);
         }
       }
       else {
@@ -438,7 +443,7 @@ class CaptchaImageResponse extends Response {
         imagestring($image, 5, $pos_x, $pos_y, $character, $color);
       }
       else {
-        imagettftext($image, $font_size, $angle, $pos_x, $pos_y, $color, drupal_realpath($font), $character);
+        imagettftext($image, $font_size, $angle, $pos_x, $pos_y, $color, \Drupal::service('file_system')->realpath($font), $character);
       }
     }
 
diff --git a/image_captcha/templates/image-captcha-refresh.html.twig b/image_captcha/templates/image-captcha-refresh.html.twig
new file mode 100644
index 0000000..9de177b
--- /dev/null
+++ b/image_captcha/templates/image-captcha-refresh.html.twig
@@ -0,0 +1,19 @@
+{#
+/**
+ * @file
+ * Custom theme implementation for custom field type defined.
+ *
+ * Available variables:
+ * - uri: An optional URL the image can be linked to.
+ * - title: An optional Title value which will be shown as text.
+ * - link_value: Value used to open the link in new or same tab.
+ *
+ * @see template_preprocess_custom_zipang_link_formatter()
+ *
+ * @ingroup themeable
+ */
+#}
+{{ attach_library('image_captcha/image-captcha-refresh') }}
+<div class="reload-captcha-wrapper">
+    {{captcha_refresh_link}}
+</div>
diff --git a/modules/captcha_long_form_id_test/captcha_long_form_id_test.info.yml b/modules/captcha_long_form_id_test/captcha_long_form_id_test.info.yml
new file mode 100644
index 0000000..93b2b61
--- /dev/null
+++ b/modules/captcha_long_form_id_test/captcha_long_form_id_test.info.yml
@@ -0,0 +1,6 @@
+name: captcha long form id test module
+type: module
+description: 'Test module for testing captchas added to forms with ids longer than 64 characters'
+package: Testing
+core: 8.x
+hidden: true
diff --git a/modules/captcha_long_form_id_test/captcha_long_form_id_test.routing.yml b/modules/captcha_long_form_id_test/captcha_long_form_id_test.routing.yml
new file mode 100644
index 0000000..0fc46ae
--- /dev/null
+++ b/modules/captcha_long_form_id_test/captcha_long_form_id_test.routing.yml
@@ -0,0 +1,8 @@
+captcha_long_form_id_test.this_formid_is_intentionally_longer_than_64_characters_to_test_captcha:
+  path: 'captcha/test_form/long_id'
+  defaults:
+    _form: '\Drupal\captcha_long_form_id_test\Form\LongIdForm'
+    _title: 'LongIdForm'
+  requirements:
+    # for testing only, can be open
+    _access: 'TRUE'
diff --git a/modules/captcha_long_form_id_test/src/Form/LongIdForm.php b/modules/captcha_long_form_id_test/src/Form/LongIdForm.php
new file mode 100644
index 0000000..bfc9ba6
--- /dev/null
+++ b/modules/captcha_long_form_id_test/src/Form/LongIdForm.php
@@ -0,0 +1,49 @@
+<?php
+
+namespace Drupal\captcha_long_form_id_test\Form;
+
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Class LongIdForm.
+ */
+class LongIdForm extends FormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'this_formid_is_intentionally_longer_than_64_characters_to_test_captcha';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $form['text_field'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Text Field'),
+      '#maxlength' => 64,
+      '#size' => 64,
+    ];
+    $form['submit'] = [
+      '#type' => 'submit',
+      '#value' => $this->t('Submit'),
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    // Display result.
+    foreach ($form_state->getValues() as $key => $value) {
+      drupal_set_message($key . ': ' . $value);
+    }
+
+  }
+
+}
diff --git a/src/Element/Captcha.php b/src/Element/Captcha.php
index 2c76d8f..d98eb91 100644
--- a/src/Element/Captcha.php
+++ b/src/Element/Captcha.php
@@ -2,15 +2,54 @@
 
 namespace Drupal\captcha\Element;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\Element\FormElement;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Defines the CAPTCHA form element with default properties.
  *
  * @FormElement("captcha")
  */
-class Captcha extends FormElement {
+class Captcha extends FormElement implements ContainerFactoryPluginInterface {
+
+  /**
+   * The config factory.
+   *
+   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   */
+  protected $configFactory;
+
+  /**
+   * Captcha constructor.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin ID for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   *   The configuration factory.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $configFactory) {
+    $this->configFactory = $configFactory;
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('config.factory')
+    );
+  }
 
   /**
    * {@inheritdoc}
@@ -32,7 +71,7 @@ class Captcha extends FormElement {
     // Override the default CAPTCHA validation function for case
     // insensitive validation.
     // TODO: shouldn't this be done somewhere else, e.g. in form_alter?
-    if (CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE == \Drupal::config('captcha.settings')
+    if (CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE == $this->configFactory->get('captcha.settings')
       ->get('default_validation')
     ) {
       $captcha_element['#captcha_validate'] = 'captcha_validate_case_insensitive_equality';
@@ -50,7 +89,7 @@ class Captcha extends FormElement {
     // Add JavaScript for general CAPTCHA functionality.
     $element['#attached']['library'][] = 'captcha/base';
 
-    if ($form_state->getTriggeringElement() && is_array($form_state->getTriggeringElement()['#limit_validation_errors'])) {
+    if ($form_state->getTriggeringElement() && isset($form_state->getTriggeringElement()['#limit_validation_errors']) && is_array($form_state->getTriggeringElement()['#limit_validation_errors'])) {
       // This is a partial (ajax) submission with limited validation. Do not
       // change anything about the captcha element, assume that it will not
       // update the captcha element, do not generate anything, which keeps the
@@ -74,7 +113,7 @@ class Captcha extends FormElement {
       // not reuse one from a posted form.
       $captcha_sid = _captcha_generate_captcha_session($this_form_id, CAPTCHA_STATUS_UNSOLVED);
       $captcha_token = md5(mt_rand());
-      db_update('captcha_sessions')
+      \Drupal::database()->update('captcha_sessions')
         ->fields(['token' => $captcha_token])
         ->condition('csid', $captcha_sid)
         ->execute();
@@ -90,13 +129,14 @@ class Captcha extends FormElement {
       '#value' => $captcha_sid,
     ];
 
-    // Additional one time CAPTCHA token: store in database and send with form.
-    // $captcha_token = hash('sha256', mt_rand());
-    // db_update('captcha_sessions')
-    //   ->fields(['token' => $captcha_token])
-    //   ->condition('csid', $captcha_sid)
-    //   ->execute();
-    $captcha_token = db_query("SELECT token FROM {captcha_sessions} WHERE csid = :csid", [':csid' => $captcha_sid])->fetchField();
+    // Store CAPTCHA token as hidden field.
+    $captcha_token = \Drupal::database()
+      ->select('captcha_sessions', 'cs')
+      ->fields('cs', ['token'])
+      ->condition('csid', $captcha_sid)
+      ->execute()
+      ->fetchField();
+
     $element['captcha_token'] = [
       '#type' => 'hidden',
       '#value' => $captcha_token,
@@ -111,12 +151,16 @@ class Captcha extends FormElement {
     //   useful in _captcha_get_posted_captcha_info().
     // - $element['#captcha_info'], for post processing functions that do not
     //   receive a $form_state argument (e.g. the pre_render callback).
+    // Added a new access attribute,
+    // by default it will be true if access attribute
+    // not defined in a custom form.
     $form_state->set('captcha_info', [
       'this_form_id' => $this_form_id,
       'posted_form_id' => $posted_form_id,
       'captcha_sid' => $captcha_sid,
       'module' => $captcha_type_module,
       'captcha_type' => $captcha_type_challenge,
+      'access' => isset($element['#access']) ? $element['#access'] : CAPTCHA_FIELD_DEFAULT_ACCESS,
     ]);
     $element['#captcha_info'] = [
       'form_id' => $this_form_id,
@@ -179,6 +223,19 @@ class Captcha extends FormElement {
       // Store the solution in the #captcha_info array.
       $element['#captcha_info']['solution'] = $captcha['solution'];
 
+      // Store if this captcha type is cacheable:
+      // A cacheable captcha must not depend on the sid or solution, but be
+      // independent - like for example recaptcha.
+      $element['#captcha_info']['cacheable'] = !empty($captcha['cacheable']);
+
+      if (!empty($element['#captcha_info']['cacheable'])) {
+        // This is only used to avoid the re-use message.
+        $element['captcha_cacheable'] = [
+          '#type' => 'hidden',
+          '#value' => 1,
+        ];
+      }
+
       // Make sure we can use a top level form value
       // $form_state->getValue('captcha_response'),
       // even if the form has #tree=true.
diff --git a/src/Entity/CaptchaPoint.php b/src/Entity/CaptchaPoint.php
index 4b6c458..ee80f80 100755
--- a/src/Entity/CaptchaPoint.php
+++ b/src/Entity/CaptchaPoint.php
@@ -99,8 +99,10 @@ class CaptchaPoint extends ConfigEntityBase implements CaptchaPointInterface {
       return $this->captchaType;
     }
     else {
-      // @Todo inject config via DI.
-      return \Drupal::config('captcha.settings')->get('default_challenge');
+      return static::getConfigManager()
+        ->getConfigFactory()
+        ->get('captcha.settings')
+        ->get('default_challenge');
     }
   }
 
diff --git a/src/EventSubscriber/CaptchaCachedSettingsSubscriber.php b/src/EventSubscriber/CaptchaCachedSettingsSubscriber.php
index c24c8d3..789a047 100644
--- a/src/EventSubscriber/CaptchaCachedSettingsSubscriber.php
+++ b/src/EventSubscriber/CaptchaCachedSettingsSubscriber.php
@@ -4,6 +4,7 @@ namespace Drupal\captcha\EventSubscriber;
 
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
+use Drupal\Core\Render\ElementInfoManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -12,6 +13,23 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 class CaptchaCachedSettingsSubscriber implements EventSubscriberInterface {
 
   /**
+   * The Element info.
+   *
+   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   */
+  protected $elementInfo;
+
+  /**
+   * CaptchaCachedSettingsSubscriber constructor.
+   *
+   * @param \Drupal\Core\Render\ElementInfoManagerInterface $elementInfo
+   *   Constructor.
+   */
+  public function __construct(ElementInfoManagerInterface $elementInfo) {
+    $this->elementInfo = $elementInfo;
+  }
+
+  /**
    * Clearing the cached definitions whenever the settings are modified.
    *
    * @param \Drupal\Core\Config\ConfigCrudEvent $event
@@ -21,7 +39,7 @@ class CaptchaCachedSettingsSubscriber implements EventSubscriberInterface {
     // Changing the Captcha settings means that any page might result in other
     // settings for captcha so the cached definitions need to be cleared.
     if ($event->getConfig()->getName() === 'captcha.settings') {
-      \Drupal::service('element_info')->clearCachedDefinitions();
+      $this->elementInfo->clearCachedDefinitions();
     }
   }
 
diff --git a/src/Form/CaptchaExamplesForm.php b/src/Form/CaptchaExamplesForm.php
index 37dd94f..ceae692 100755
--- a/src/Form/CaptchaExamplesForm.php
+++ b/src/Form/CaptchaExamplesForm.php
@@ -2,10 +2,12 @@
 
 namespace Drupal\captcha\Form;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Displays the captcha settings form.
@@ -13,6 +15,32 @@ use Drupal\Core\Url;
 class CaptchaExamplesForm extends FormBase {
 
   /**
+   * The module handler.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+  /**
+   * CaptchaExamplesForm constructor.
+   *
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   *   Constructor.
+   */
+  public function __construct(ModuleHandlerInterface $moduleHandler) {
+    $this->moduleHandler = $moduleHandler;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('module_handler')
+    );
+  }
+
+  /**
    * {@inheritdoc}
    */
   public function getFormId() {
@@ -38,7 +66,7 @@ class CaptchaExamplesForm extends FormBase {
         '#markup' => $this->t('This page gives an overview of all available challenge types, generated with their current settings.'),
       ];
 
-      $modules_list = \Drupal::moduleHandler()->getImplementations('captcha');
+      $modules_list = $this->moduleHandler->getImplementations('captcha');
       foreach ($modules_list as $mkey => $module) {
         $challenges = call_user_func_array($module . '_captcha', ['list']);
 
diff --git a/src/Form/CaptchaPointForm.php b/src/Form/CaptchaPointForm.php
index f5d2a7a..50b7768 100755
--- a/src/Form/CaptchaPointForm.php
+++ b/src/Form/CaptchaPointForm.php
@@ -4,6 +4,8 @@ namespace Drupal\captcha\Form;
 
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
 
 /**
  * Entity Form to edit CAPTCHA points.
@@ -11,6 +13,37 @@ use Drupal\Core\Form\FormStateInterface;
 class CaptchaPointForm extends EntityForm {
 
   /**
+   * The request stack.
+   *
+   * @var \Symfony\Component\HttpFoundation\RequestStack
+   */
+  protected $requestStack;
+
+  /**
+   * CaptchaPointForm constructor.
+   *
+   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   *   Constructor.
+   */
+  public function __construct(RequestStack $request_stack) {
+    $this->requestStack = $request_stack;
+  }
+
+  /**
+   * Create Captcha Points.
+   *
+   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   *   Event to create Captcha points.
+   *
+   * @return static
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('request_stack')
+    );
+  }
+
+  /**
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
@@ -22,7 +55,7 @@ class CaptchaPointForm extends EntityForm {
     $captcha_point = $this->entity;
 
     // Support to set a default form_id through a query argument.
-    $request = \Drupal::request();
+    $request = $this->requestStack->getCurrentRequest();
     if ($captcha_point->isNew() && !$captcha_point->id() && $request->query->has('form_id')) {
       $captcha_point->set('formId', $request->query->get('form_id'));
       $captcha_point->set('label', $request->query->get('form_id'));
@@ -31,6 +64,7 @@ class CaptchaPointForm extends EntityForm {
     $form['label'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Form ID'),
+      '#description' => $this->t('Also works with the base form ID.'),
       '#default_value' => $captcha_point->label(),
       '#required' => TRUE,
     ];
diff --git a/src/Form/CaptchaSettingsForm.php b/src/Form/CaptchaSettingsForm.php
index a9ecbd4..402da86 100755
--- a/src/Form/CaptchaSettingsForm.php
+++ b/src/Form/CaptchaSettingsForm.php
@@ -4,6 +4,7 @@ namespace Drupal\captcha\Form;
 
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -22,16 +23,26 @@ class CaptchaSettingsForm extends ConfigFormBase {
   protected $cacheBackend;
 
   /**
+   * The module handler.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+  /**
    * Constructs a \Drupal\captcha\Form\CaptchaSettingsForm object.
    *
    * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   *   Module handler.
    */
-  public function __construct(ConfigFactoryInterface $config_factory, CacheBackendInterface $cache_backend) {
+  public function __construct(ConfigFactoryInterface $config_factory, CacheBackendInterface $cache_backend, ModuleHandlerInterface $moduleHandler) {
     parent::__construct($config_factory);
     $this->cacheBackend = $cache_backend;
+    $this->moduleHandler = $moduleHandler;
   }
 
   /**
@@ -40,7 +51,8 @@ class CaptchaSettingsForm extends ConfigFormBase {
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('config.factory'),
-      $container->get('cache.default')
+      $container->get('cache.default'),
+      $container->get('module_handler')
     );
   }
 
@@ -82,6 +94,13 @@ class CaptchaSettingsForm extends ConfigFormBase {
       '#default_value' => $config->get('default_challenge'),
     ];
 
+    // Option for enabling CAPTCHA for all forms.
+    $form['form_protection']['enabled_default'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Default challenge on non-listed forms.'),
+      '#description' => $this->t('Enable CAPTCHA for every form not listed here'),
+      '#default_value' => $config->get('enabled_default'),
+    ];
     // Field for the CAPTCHA administration mode.
     $form['form_protection']['administration_mode'] = [
       '#type' => 'checkbox',
@@ -179,7 +198,7 @@ class CaptchaSettingsForm extends ConfigFormBase {
     ];
 
     // Replace the description with a link if dblog.module is enabled.
-    if (\Drupal::moduleHandler()->moduleExists('dblog')) {
+    if ($this->moduleHandler->moduleExists('dblog')) {
       $form['log_wrong_responses']['#description'] = $this->t('Report information about wrong responses to the <a href=":dblog">log</a>.', [
         ':dblog' => Url::fromRoute('dblog.overview')->toString(),
       ]);
@@ -203,6 +222,7 @@ class CaptchaSettingsForm extends ConfigFormBase {
     $config->set('administration_mode', $form_state->getValue('administration_mode'));
     $config->set('allow_on_admin_pages', $form_state->getValue('allow_on_admin_pages'));
     $config->set('default_challenge', $form_state->getValue('default_challenge'));
+    $config->set('enabled_default', $form_state->getValue('enabled_default'));
 
     // CAPTCHA description stuff.
     $config->set('add_captcha_description', $form_state->getValue('add_captcha_description'));
@@ -224,7 +244,7 @@ class CaptchaSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structured array.
-   * @param FormStateInterface $form_state
+   * @param Drupal\Core\Form\FormStateInterface $form_state
    *   Form state structured array.
    */
   public function clearCaptchaPlacementCacheSubmit(array $form, FormStateInterface $form_state) {
diff --git a/src/Tests/CaptchaAdminTestCase.php b/src/Tests/CaptchaAdminTestCase.php
index 3e87063..2dfc522 100755
--- a/src/Tests/CaptchaAdminTestCase.php
+++ b/src/Tests/CaptchaAdminTestCase.php
@@ -258,7 +258,7 @@ class CaptchaAdminTestCase extends CaptchaBaseWebTestCase {
    *   Form machine ID.
    *
    * @return \Drupal\captcha\Entity\CaptchaPoint
-   *    CaptchaPoint with mysql query result.
+   *   CaptchaPoint with mysql query result.
    */
   protected function getCaptchaPointSettingFromDatabase($form_id) {
     $ids = \Drupal::entityQuery('captcha_point')
diff --git a/src/Tests/CaptchaBaseWebTestCase.php b/src/Tests/CaptchaBaseWebTestCase.php
index 267938e..2baa5b0 100755
--- a/src/Tests/CaptchaBaseWebTestCase.php
+++ b/src/Tests/CaptchaBaseWebTestCase.php
@@ -6,6 +6,7 @@ use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
 use Drupal\comment\Tests\CommentTestTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\simpletest\WebTestBase;
+use Drupal\Core\Session\AccountInterface;
 
 /**
  * The TODO list.
@@ -35,11 +36,6 @@ abstract class CaptchaBaseWebTestCase extends WebTestBase {
   const CAPTCHA_WRONG_RESPONSE_ERROR_MESSAGE = 'The answer you entered for the CAPTCHA was not correct.';
 
   /**
-   * Session reuse attack error message.
-   */
-  const CAPTCHA_SESSION_REUSE_ATTACK_ERROR_MESSAGE = 'CAPTCHA session reuse attack detected.';
-
-  /**
    * Unknown CSID error message.
    */
   const CAPTCHA_UNKNOWN_CSID_ERROR_MESSAGE = 'CAPTCHA validation error: unknown CAPTCHA session ID. Contact the site administrator if this problem persists.';
@@ -137,11 +133,6 @@ abstract class CaptchaBaseWebTestCase extends WebTestBase {
       'CAPTCHA response should be accepted (known CSID).',
       'CAPTCHA'
     );
-    // There should be no error message about CSID reuse attack.
-    $this->assertNoText(self::CAPTCHA_SESSION_REUSE_ATTACK_ERROR_MESSAGE,
-      'CAPTCHA response should be accepted (no CAPTCHA session reuse attack detection).',
-      'CAPTCHA'
-    );
     // There should be no error message about wrong response.
     $this->assertNoText(self::CAPTCHA_WRONG_RESPONSE_ERROR_MESSAGE,
       'CAPTCHA response should be accepted (correct response).',
@@ -270,7 +261,7 @@ abstract class CaptchaBaseWebTestCase extends WebTestBase {
    */
   protected function allowCommentPostingForAnonymousVisitors() {
     // Enable anonymous comments.
-    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, [
+    user_role_grant_permissions(AccountInterface::ANONYMOUS_ROLE, [
       'access comments',
       'post comments',
       'skip comment approval',
diff --git a/src/Tests/CaptchaCronTestCase.php b/src/Tests/CaptchaCronTestCase.php
index e0b24a9..d1ec8c4 100644
--- a/src/Tests/CaptchaCronTestCase.php
+++ b/src/Tests/CaptchaCronTestCase.php
@@ -32,11 +32,14 @@ class CaptchaCronTestCase extends WebTestBase {
   public function setUp() {
     parent::setUp();
 
+    // Get request time.
+    $request_time = \Drupal::time()->getRequestTime();
+
     // Add removed session.
-    $time = REQUEST_TIME - 1 - 60 * 60 * 24;
+    $time = $request_time - 1 - 60 * 60 * 24;
     $this->captchaSessions['remove_sid'] = $this->addCaptchaSession('captcha_cron_test_remove', $time);
     // Add remain session.
-    $this->captchaSessions['remain_sid'] = $this->addCaptchaSession('captcha_cron_test_remain', REQUEST_TIME);
+    $this->captchaSessions['remain_sid'] = $this->addCaptchaSession('captcha_cron_test_remain', $request_time);
   }
 
   /**
diff --git a/src/Tests/CaptchaSessionReuseAttackTestCase.php b/src/Tests/CaptchaSessionReuseAttackTestCase.php
index 040bba9..c574399 100755
--- a/src/Tests/CaptchaSessionReuseAttackTestCase.php
+++ b/src/Tests/CaptchaSessionReuseAttackTestCase.php
@@ -13,10 +13,6 @@ class CaptchaSessionReuseAttackTestCase extends CaptchaBaseWebTestCase {
    * Assert that the CAPTCHA session ID reuse attack was detected.
    */
   protected function assertCaptchaSessionIdReuseAttackDetection() {
-    $this->assertText(self::CAPTCHA_SESSION_REUSE_ATTACK_ERROR_MESSAGE,
-      'CAPTCHA session ID reuse attack should be detected.',
-      'CAPTCHA'
-    );
     // There should be an error message about wrong response.
     $this->assertText(self::CAPTCHA_WRONG_RESPONSE_ERROR_MESSAGE,
       'CAPTCHA response should flagged as wrong.',
@@ -135,7 +131,7 @@ class CaptchaSessionReuseAttackTestCase extends CaptchaBaseWebTestCase {
 
     // Log in through form.
     $edit = [
-      'name' => $this->normalUser->getUsername(),
+      'name' => $this->normalUser->getDisplayName(),
       'pass' => $this->normalUser->pass_raw,
       'captcha_response' => $solution,
     ];
@@ -144,7 +140,7 @@ class CaptchaSessionReuseAttackTestCase extends CaptchaBaseWebTestCase {
     $this->assertCaptchaPresence(FALSE);
     // If a "log out" link appears on the page, it is almost certainly because
     // the login was successful.
-    $this->assertText($this->normalUser->getUsername());
+    $this->assertText($this->normalUser->getDisplayName());
 
     // Log out again.
     $this->drupalLogout();
diff --git a/src/Tests/CaptchaTestCase.php b/src/Tests/CaptchaTestCase.php
index 924c1f7..8fa95e5 100755
--- a/src/Tests/CaptchaTestCase.php
+++ b/src/Tests/CaptchaTestCase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\captcha\Tests;
 
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -18,7 +19,7 @@ class CaptchaTestCase extends CaptchaBaseWebTestCase {
    *
    * @var array
    */
-  public static $modules = ['block'];
+  public static $modules = ['block', 'captcha_long_form_id_test'];
 
   /**
    * Testing the protection of the user log in form.
@@ -39,12 +40,12 @@ class CaptchaTestCase extends CaptchaBaseWebTestCase {
     $captcha_point->enable()->save();
 
     // Check if there is a CAPTCHA on the login form (look for the title).
-    $this->drupalGet('');
+    $this->drupalGet('user');
     $this->assertCaptchaPresence(TRUE);
 
     // Try to log in, which should fail.
     $edit = [
-      'name' => $user->getUsername(),
+      'name' => $user->getDisplayName(),
       'pass' => $user->pass_raw,
       'captcha_response' => '?',
     ];
@@ -218,7 +219,7 @@ class CaptchaTestCase extends CaptchaBaseWebTestCase {
    */
   public function testAjaxFormRebuild() {
     // Setup captcha point for user edit form.
-    \Drupal::entityManager()->getStorage('captcha_point')->create([
+    \Drupal::entityTypeManager()->getStorage('captcha_point')->create([
       'id' => 'user_form',
       'formId' => 'user_form',
       'status' => TRUE,
@@ -237,7 +238,18 @@ class CaptchaTestCase extends CaptchaBaseWebTestCase {
       'field_storage' => $field_storage_config,
       'bundle' => 'user',
     ])->save();
-    entity_get_form_display('user', 'user', 'default')
+
+    $entity_form_display = EntityFormDisplay::load('user.user.default');
+    if (!$entity_form_display) {
+      $entity_form_display = EntityFormDisplay::create([
+        'targetEntityType' => 'user',
+        'bundle' => 'user',
+        'mode' => 'default',
+        'status' => TRUE,
+      ]);
+    }
+
+    $entity_form_display
       ->setComponent('field_texts', [
         'type' => 'string_textfield',
         'weight' => 10,
@@ -259,4 +271,35 @@ class CaptchaTestCase extends CaptchaBaseWebTestCase {
     $this->assertText(t('The changes have been saved.'));
   }
 
+  /**
+   * Test that forms with IDs exceeding 64 characters can be assigned captchas.
+   */
+  public function testLongFormId() {
+    // We add the form manually so we can mimic the character
+    // truncation of the label field as formId.
+    $this->drupalLogin($this->adminUser);
+    $this->drupalGet(self::CAPTCHA_ADMIN_PATH);
+
+    $label = 'this_formid_is_intentionally_longer_than_64_characters_to_test_captcha';
+    // Truncated to 64 chars so it can be a machine name.
+    $formId = substr($label, 0, 64);
+
+    $form_values = [
+      'label' => $label,
+      'formId' => $formId,
+      'captchaType' => 'captcha/Math',
+    ];
+
+    // Create intentionally long id Captcha Point.
+    $this->drupalPostForm(self::CAPTCHA_ADMIN_PATH . '/captcha-points/add', $form_values, t('Save'));
+    $this->assertRaw(t('Captcha Point for %label form was created.', ['%label' => $formId]));
+
+    // We need to log out to test the captcha.
+    $this->drupalLogout();
+
+    // Navigate to the form with a >64 char id and confirm there is Captcha.
+    $this->drupalGet('captcha/test_form/long_id');
+    $this->assertCaptchaPresence(TRUE);
+  }
+
 }
